import{y as n,z as h}from"./index-fe7ef7ff.js";const c=r=>n.defaults.baseURL&&n.defaults.baseURL.includes("https://lang-reader-gxdpf7dff2bbbufb.canadacentral-01.azurewebsites.net/api")&&r.startsWith("/api/")?r.substring(4):r;async function l(){const r=c("/projects");return console.log("API Request to:",n.defaults.baseURL+r),(await n.get(r)).data}async function u(r){if(!r)throw new Error("Project ID is required");const t=c(`/projects/${r}`);return console.log("API Request to:",n.defaults.baseURL+t),(await n.get(t)).data}async function d(r){const t=c("/projects");return console.log("API Request to:",n.defaults.baseURL+t),(await n.post(t,{...r,createdAt:new Date().toISOString(),breakpoints:[],notesText:""})).data}async function a(r,t){if(!r)throw new Error("Project ID is required");t.notesText!==void 0&&(t.notesText=String(t.notesText));const e=c(`/projects/${r}`);return console.log("API Request to:",n.defaults.baseURL+e),(await n.put(e,t)).data}async function j(r){if(!r)throw new Error("Project ID is required");const t=c(`/projects/${r}`);console.log("API Request to:",n.defaults.baseURL+t),await n.delete(t)}async function f(r,t){if(!r)throw new Error("Project ID is required");const o=[...(await u(r)).breakpoints,t];return a(r,{breakpoints:o})}async function P(r,t,e){if(!r)throw new Error("Project ID is required");const s=[...(await u(r)).breakpoints];return s[t]=e,a(r,{breakpoints:s})}async function k(r,t){if(!r)throw new Error("Project ID is required");const o=(await u(r)).breakpoints.filter((s,i)=>i!==t);return a(r,{breakpoints:o})}async function b(r,t){if(!r)throw new Error("Project ID is required");const e=String(t||"");return a(r,{notesText:e})}const w=h("projects",{state:()=>({projects:[],currentProject:null,loading:!1,error:null}),getters:{sortedProjects:r=>[...r.projects].sort((t,e)=>new Date(e.createdAt)-new Date(t.createdAt)),sortedBreakpoints:r=>!r.currentProject||!r.currentProject.breakpoints?[]:[...r.currentProject.breakpoints].sort((t,e)=>t.time-e.time)},actions:{async fetchProjects(){this.loading=!0,this.error=null;try{this.projects=await l()}catch(r){console.error("Failed to fetch projects:",r),this.error="Failed to load project list"}finally{this.loading=!1}},async fetchProject(r){this.loading=!0,this.error=null;try{this.currentProject=await u(r)}catch(t){console.error(`Failed to fetch project ${r}:`,t),this.error="Failed to load project details"}finally{this.loading=!1}},async addProject(r){this.loading=!0,this.error=null;try{const t=await d(r);return this.projects.push(t),t}catch(t){throw console.error("Failed to create project:",t),this.error="Failed to create project",t}finally{this.loading=!1}},async updateProject(r,t){if(!r)throw this.error="Cannot update project: Missing ID",new Error("Project ID is required");this.loading=!0,this.error=null;try{const e=await a(r,t),o=this.projects.findIndex(s=>s._id===r);return o!==-1&&(this.projects[o]=e),this.currentProject&&this.currentProject._id===r&&(this.currentProject=e),e}catch(e){throw console.error(`Failed to update project ${r}:`,e),this.error="Failed to update project",e}finally{this.loading=!1}},async removeProject(r){if(!r)throw this.error="Cannot delete project: Missing ID",new Error("Project ID is required");this.loading=!0,this.error=null;try{await j(r),this.projects=this.projects.filter(t=>t._id!==r),this.currentProject&&this.currentProject._id===r&&(this.currentProject=null)}catch(t){throw console.error(`Failed to delete project ${r}:`,t),this.error="Failed to delete project",t}finally{this.loading=!1}},async addBreakpoint(r){if(!this.currentProject){this.error="No project selected, cannot add breakpoint";return}if(!this.currentProject._id){this.error="Invalid project: Missing ID";return}this.error=null;try{const t=[...this.currentProject.breakpoints,r];return t.sort((e,o)=>e.time-o.time),this.currentProject&&(this.currentProject.breakpoints=t),f(this.currentProject._id,r).then(e=>{const o=e.breakpoints||[];JSON.stringify(o)!==JSON.stringify(this.currentProject.breakpoints)&&(console.log("Syncing breakpoints with server"),this.currentProject.breakpoints=o);const s=this.projects.findIndex(i=>i._id===this.currentProject._id);s!==-1&&(this.projects[s].breakpoints=this.currentProject.breakpoints)}).catch(e=>{console.error("Background breakpoint sync failed:",e)}),this.currentProject}catch(t){throw console.error("Failed to add breakpoint:",t),this.error="Failed to add breakpoint",t}},async updateBreakpoint(r,t){if(!this.currentProject){this.error="No project selected, cannot update breakpoint";return}if(!this.currentProject._id){this.error="Invalid project: Missing ID";return}this.error=null;try{const e=[...this.currentProject.breakpoints];return e[r]={...e[r],...t},this.currentProject={...this.currentProject,breakpoints:[...e]},P(this.currentProject._id,r,t).then(o=>{const s=o.breakpoints||[];JSON.stringify(s)!==JSON.stringify(this.currentProject.breakpoints)&&(console.log("Syncing breakpoints with server"),this.currentProject={...this.currentProject,breakpoints:[...s]});const i=this.projects.findIndex(p=>p._id===this.currentProject._id);i!==-1&&(this.projects[i]={...this.projects[i],breakpoints:[...this.currentProject.breakpoints]})}).catch(o=>{console.error("Background breakpoint sync failed:",o)}),this.currentProject}catch(e){throw console.error("Failed to update breakpoint:",e),this.error="Failed to update breakpoint",e}},async removeBreakpoint(r){if(!this.currentProject){this.error="No project selected, cannot delete breakpoint";return}if(!this.currentProject._id){this.error="Invalid project: Missing ID";return}this.error=null;try{const t=this.currentProject.breakpoints.filter((e,o)=>o!==r);return this.currentProject&&(this.currentProject.breakpoints=t),k(this.currentProject._id,r).then(e=>{const o=e.breakpoints||[];JSON.stringify(o)!==JSON.stringify(this.currentProject.breakpoints)&&(console.log("Syncing breakpoints with server"),this.currentProject.breakpoints=o);const s=this.projects.findIndex(i=>i._id===this.currentProject._id);s!==-1&&(this.projects[s].breakpoints=this.currentProject.breakpoints)}).catch(e=>{console.error("Background breakpoint sync failed:",e)}),this.currentProject}catch(t){throw console.error("Failed to delete breakpoint:",t),this.error="Failed to delete breakpoint",t}},async updateNotes(r){if(!this.currentProject){this.error="No project selected, cannot update notes";return}if(!this.currentProject._id){this.error="Invalid project: Missing ID";return}this.loading=!0,this.error=null;try{const t=await b(this.currentProject._id,r);this.currentProject=t;const e=this.projects.findIndex(o=>o._id===this.currentProject._id);return e!==-1&&(this.projects[e]=t),t}catch(t){throw console.error("Failed to update notes:",t),this.error="Failed to update notes",t}finally{this.loading=!1}},clearError(){this.error=null}}}),y=(r,t)=>{const e=r.__vccOpts||r;for(const[o,s]of t)e[o]=s;return e};export{y as _,w as u};
